# Generated by ORMatic

from __future__ import annotations
from sqlalchemy import (
    Column,
    ForeignKey,
    Integer,
    String,
    Float,
    Boolean,
    DateTime,
    Enum,
    JSON,
)
from sqlalchemy.orm import relationship, Mapped, mapped_column, DeclarativeBase

import builtins
import datetime
import krrood.entity_query_language.orm.model
import krrood.entity_query_language.predicate
import krrood.entity_query_language.property_descriptor
import krrood.entity_query_language.symbol_graph
import test.dataset.example_classes
import test.dataset.semantic_world_like_classes
import typing
import typing_extensions


from krrood.ormatic.dao import DataAccessObject
from krrood.ormatic.custom_types import TypeType


class Base(DeclarativeBase):
    type_mappings = {}


class PredicateRelationDAO(
    Base, DataAccessObject[krrood.entity_query_language.symbol_graph.PredicateRelation]
):

    __tablename__ = "PredicateRelationDAO"

    database_id: Mapped[builtins.int] = mapped_column(
        Integer, primary_key=True, use_existing_column=True
    )

    inferred: Mapped[builtins.bool] = mapped_column(use_existing_column=True)

    source_id: Mapped[int] = mapped_column(
        ForeignKey("WrappedInstanceDAO.database_id", use_alter=True),
        nullable=True,
        use_existing_column=True,
    )
    target_id: Mapped[int] = mapped_column(
        ForeignKey("WrappedInstanceDAO.database_id", use_alter=True),
        nullable=True,
        use_existing_column=True,
    )
    predicate_id: Mapped[int] = mapped_column(
        ForeignKey("PredicateDAO.database_id", use_alter=True),
        nullable=True,
        use_existing_column=True,
    )
    symbolgraphmappingdao_predicate_relations_id: Mapped[
        typing.Optional[builtins.int]
    ] = mapped_column(
        ForeignKey("SymbolGraphMappingDAO.database_id", use_alter=True),
        nullable=True,
        use_existing_column=True,
    )

    source: Mapped[WrappedInstanceDAO] = relationship(
        "WrappedInstanceDAO", uselist=False, foreign_keys=[source_id], post_update=True
    )
    target: Mapped[WrappedInstanceDAO] = relationship(
        "WrappedInstanceDAO", uselist=False, foreign_keys=[target_id], post_update=True
    )
    predicate: Mapped[PredicateDAO] = relationship(
        "PredicateDAO", uselist=False, foreign_keys=[predicate_id], post_update=True
    )


class SymbolDAO(Base, DataAccessObject[krrood.entity_query_language.predicate.Symbol]):

    __tablename__ = "SymbolDAO"

    database_id: Mapped[builtins.int] = mapped_column(
        Integer, primary_key=True, use_existing_column=True
    )

    polymorphic_type: Mapped[str] = mapped_column(
        String(255), nullable=False, use_existing_column=True
    )

    __mapper_args__ = {
        "polymorphic_on": "polymorphic_type",
        "polymorphic_identity": "SymbolDAO",
    }


class AlternativeMappingAggregatorDAO(
    SymbolDAO,
    DataAccessObject[test.dataset.example_classes.AlternativeMappingAggregator],
):

    __tablename__ = "AlternativeMappingAggregatorDAO"

    database_id: Mapped[builtins.int] = mapped_column(
        ForeignKey(SymbolDAO.database_id), primary_key=True, use_existing_column=True
    )

    entities1: Mapped[typing.List[CustomEntityDAO]] = relationship(
        "CustomEntityDAO",
        foreign_keys="[CustomEntityDAO.alternativemappingaggregatordao_entities1_id]",
        post_update=True,
    )
    entities2: Mapped[typing.List[CustomEntityDAO]] = relationship(
        "CustomEntityDAO",
        foreign_keys="[CustomEntityDAO.alternativemappingaggregatordao_entities2_id]",
        post_update=True,
    )

    __mapper_args__ = {
        "polymorphic_identity": "AlternativeMappingAggregatorDAO",
        "inherit_condition": database_id == SymbolDAO.database_id,
    }


class AtomDAO(SymbolDAO, DataAccessObject[test.dataset.example_classes.Atom]):

    __tablename__ = "AtomDAO"

    database_id: Mapped[builtins.int] = mapped_column(
        ForeignKey(SymbolDAO.database_id), primary_key=True, use_existing_column=True
    )

    element: Mapped[test.dataset.example_classes.Element] = mapped_column(
        use_existing_column=True
    )
    type: Mapped[builtins.int] = mapped_column(use_existing_column=True)
    charge: Mapped[builtins.float] = mapped_column(use_existing_column=True)
    timestamp: Mapped[datetime.datetime] = mapped_column(use_existing_column=True)

    __mapper_args__ = {
        "polymorphic_identity": "AtomDAO",
        "inherit_condition": database_id == SymbolDAO.database_id,
    }


class BackreferenceMappingDAO(
    Base, DataAccessObject[test.dataset.example_classes.BackreferenceMapping]
):

    __tablename__ = "BackreferenceMappingDAO"

    database_id: Mapped[builtins.int] = mapped_column(
        Integer, primary_key=True, use_existing_column=True
    )

    values: Mapped[typing.List[builtins.int]] = mapped_column(
        JSON, nullable=False, use_existing_column=True
    )

    reference_id: Mapped[int] = mapped_column(
        ForeignKey("ReferenceDAO.database_id", use_alter=True),
        nullable=True,
        use_existing_column=True,
    )

    reference: Mapped[ReferenceDAO] = relationship(
        "ReferenceDAO", uselist=False, foreign_keys=[reference_id], post_update=True
    )


class ContainerGenerationDAO(
    SymbolDAO, DataAccessObject[test.dataset.example_classes.ContainerGeneration]
):

    __tablename__ = "ContainerGenerationDAO"

    database_id: Mapped[builtins.int] = mapped_column(
        ForeignKey(SymbolDAO.database_id), primary_key=True, use_existing_column=True
    )

    items: Mapped[typing.List[ItemWithBackreferenceDAO]] = relationship(
        "ItemWithBackreferenceDAO",
        foreign_keys="[ItemWithBackreferenceDAO.containergenerationdao_items_id]",
        post_update=True,
    )

    __mapper_args__ = {
        "polymorphic_identity": "ContainerGenerationDAO",
        "inherit_condition": database_id == SymbolDAO.database_id,
    }


class DoublePositionAggregatorDAO(
    SymbolDAO, DataAccessObject[test.dataset.example_classes.DoublePositionAggregator]
):

    __tablename__ = "DoublePositionAggregatorDAO"

    database_id: Mapped[builtins.int] = mapped_column(
        ForeignKey(SymbolDAO.database_id), primary_key=True, use_existing_column=True
    )

    positions1: Mapped[typing.List[PositionDAO]] = relationship(
        "PositionDAO",
        foreign_keys="[PositionDAO.doublepositionaggregatordao_positions1_id]",
        post_update=True,
    )
    positions2: Mapped[typing.List[PositionDAO]] = relationship(
        "PositionDAO",
        foreign_keys="[PositionDAO.doublepositionaggregatordao_positions2_id]",
        post_update=True,
    )

    __mapper_args__ = {
        "polymorphic_identity": "DoublePositionAggregatorDAO",
        "inherit_condition": database_id == SymbolDAO.database_id,
    }


class CustomEntityDAO(
    Base, DataAccessObject[test.dataset.example_classes.CustomEntity]
):

    __tablename__ = "CustomEntityDAO"

    database_id: Mapped[builtins.int] = mapped_column(
        Integer, primary_key=True, use_existing_column=True
    )

    overwritten_name: Mapped[builtins.str] = mapped_column(use_existing_column=True)

    alternativemappingaggregatordao_entities1_id: Mapped[
        typing.Optional[builtins.int]
    ] = mapped_column(
        ForeignKey("AlternativeMappingAggregatorDAO.database_id", use_alter=True),
        nullable=True,
        use_existing_column=True,
    )
    alternativemappingaggregatordao_entities2_id: Mapped[
        typing.Optional[builtins.int]
    ] = mapped_column(
        ForeignKey("AlternativeMappingAggregatorDAO.database_id", use_alter=True),
        nullable=True,
        use_existing_column=True,
    )


class DerivedEntityDAO(
    CustomEntityDAO, DataAccessObject[test.dataset.example_classes.DerivedEntity]
):

    __tablename__ = "DerivedEntityDAO"

    database_id: Mapped[builtins.int] = mapped_column(
        ForeignKey(CustomEntityDAO.database_id),
        primary_key=True,
        use_existing_column=True,
    )

    description: Mapped[builtins.str] = mapped_column(use_existing_column=True)

    __mapper_args__ = {
        "polymorphic_identity": "DerivedEntityDAO",
        "inherit_condition": database_id == CustomEntityDAO.database_id,
    }


class EntityAssociationDAO(
    SymbolDAO, DataAccessObject[test.dataset.example_classes.EntityAssociation]
):

    __tablename__ = "EntityAssociationDAO"

    database_id: Mapped[builtins.int] = mapped_column(
        ForeignKey(SymbolDAO.database_id), primary_key=True, use_existing_column=True
    )

    a: Mapped[typing.List[builtins.str]] = mapped_column(
        JSON, nullable=False, use_existing_column=True
    )

    entity_id: Mapped[int] = mapped_column(
        ForeignKey("CustomEntityDAO.database_id", use_alter=True),
        nullable=True,
        use_existing_column=True,
    )

    entity: Mapped[CustomEntityDAO] = relationship(
        "CustomEntityDAO", uselist=False, foreign_keys=[entity_id], post_update=True
    )

    __mapper_args__ = {
        "polymorphic_identity": "EntityAssociationDAO",
        "inherit_condition": database_id == SymbolDAO.database_id,
    }


class ItemWithBackreferenceDAO(
    SymbolDAO, DataAccessObject[test.dataset.example_classes.ItemWithBackreference]
):

    __tablename__ = "ItemWithBackreferenceDAO"

    database_id: Mapped[builtins.int] = mapped_column(
        ForeignKey(SymbolDAO.database_id), primary_key=True, use_existing_column=True
    )

    value: Mapped[builtins.int] = mapped_column(use_existing_column=True)

    containergenerationdao_items_id: Mapped[typing.Optional[builtins.int]] = (
        mapped_column(
            ForeignKey("ContainerGenerationDAO.database_id", use_alter=True),
            nullable=True,
            use_existing_column=True,
        )
    )
    container_id: Mapped[int] = mapped_column(
        ForeignKey("ContainerGenerationDAO.database_id", use_alter=True),
        nullable=True,
        use_existing_column=True,
    )

    container: Mapped[ContainerGenerationDAO] = relationship(
        "ContainerGenerationDAO",
        uselist=False,
        foreign_keys=[container_id],
        post_update=True,
    )

    __mapper_args__ = {
        "polymorphic_identity": "ItemWithBackreferenceDAO",
        "inherit_condition": database_id == SymbolDAO.database_id,
    }


class KinematicChainDAO(
    SymbolDAO, DataAccessObject[test.dataset.example_classes.KinematicChain]
):

    __tablename__ = "KinematicChainDAO"

    database_id: Mapped[builtins.int] = mapped_column(
        ForeignKey(SymbolDAO.database_id), primary_key=True, use_existing_column=True
    )

    name: Mapped[builtins.str] = mapped_column(use_existing_column=True)

    torsodao_kinematic_chains_id: Mapped[typing.Optional[builtins.int]] = mapped_column(
        ForeignKey("TorsoDAO.database_id", use_alter=True),
        nullable=True,
        use_existing_column=True,
    )

    __mapper_args__ = {
        "polymorphic_identity": "KinematicChainDAO",
        "inherit_condition": database_id == SymbolDAO.database_id,
    }


class MoreShapesDAO(
    SymbolDAO, DataAccessObject[test.dataset.example_classes.MoreShapes]
):

    __tablename__ = "MoreShapesDAO"

    database_id: Mapped[builtins.int] = mapped_column(
        ForeignKey(SymbolDAO.database_id), primary_key=True, use_existing_column=True
    )

    shapes: Mapped[typing.List[ShapesDAO]] = relationship(
        "ShapesDAO",
        foreign_keys="[ShapesDAO.moreshapesdao_shapes_id]",
        post_update=True,
    )

    __mapper_args__ = {
        "polymorphic_identity": "MoreShapesDAO",
        "inherit_condition": database_id == SymbolDAO.database_id,
    }


class NodeDAO(SymbolDAO, DataAccessObject[test.dataset.example_classes.Node]):

    __tablename__ = "NodeDAO"

    database_id: Mapped[builtins.int] = mapped_column(
        ForeignKey(SymbolDAO.database_id), primary_key=True, use_existing_column=True
    )

    parent_id: Mapped[typing.Optional[builtins.int]] = mapped_column(
        ForeignKey("NodeDAO.database_id", use_alter=True),
        nullable=True,
        use_existing_column=True,
    )

    parent: Mapped[NodeDAO] = relationship(
        "NodeDAO", uselist=False, foreign_keys=[parent_id], post_update=True
    )

    __mapper_args__ = {
        "polymorphic_identity": "NodeDAO",
        "inherit_condition": database_id == SymbolDAO.database_id,
    }


class ObjectAnnotationDAO(
    SymbolDAO, DataAccessObject[test.dataset.example_classes.ObjectAnnotation]
):

    __tablename__ = "ObjectAnnotationDAO"

    database_id: Mapped[builtins.int] = mapped_column(
        ForeignKey(SymbolDAO.database_id), primary_key=True, use_existing_column=True
    )

    object_reference_id: Mapped[int] = mapped_column(
        ForeignKey("OriginalSimulatedObjectDAO.database_id", use_alter=True),
        nullable=True,
        use_existing_column=True,
    )

    object_reference: Mapped[OriginalSimulatedObjectDAO] = relationship(
        "OriginalSimulatedObjectDAO",
        uselist=False,
        foreign_keys=[object_reference_id],
        post_update=True,
    )

    __mapper_args__ = {
        "polymorphic_identity": "ObjectAnnotationDAO",
        "inherit_condition": database_id == SymbolDAO.database_id,
    }


class OrientationDAO(
    SymbolDAO, DataAccessObject[test.dataset.example_classes.Orientation]
):

    __tablename__ = "OrientationDAO"

    database_id: Mapped[builtins.int] = mapped_column(
        ForeignKey(SymbolDAO.database_id), primary_key=True, use_existing_column=True
    )

    x: Mapped[builtins.float] = mapped_column(use_existing_column=True)
    y: Mapped[builtins.float] = mapped_column(use_existing_column=True)
    z: Mapped[builtins.float] = mapped_column(use_existing_column=True)
    w: Mapped[typing.Optional[builtins.float]] = mapped_column(use_existing_column=True)

    __mapper_args__ = {
        "polymorphic_identity": "OrientationDAO",
        "inherit_condition": database_id == SymbolDAO.database_id,
    }


class OriginalSimulatedObjectDAO(
    SymbolDAO, DataAccessObject[test.dataset.example_classes.OriginalSimulatedObject]
):

    __tablename__ = "OriginalSimulatedObjectDAO"

    database_id: Mapped[builtins.int] = mapped_column(
        ForeignKey(SymbolDAO.database_id), primary_key=True, use_existing_column=True
    )

    placeholder: Mapped[builtins.float] = mapped_column(use_existing_column=True)

    concept: Mapped[typing.Optional[test.dataset.example_classes.ConceptType]] = (
        mapped_column(
            test.dataset.example_classes.ConceptType,
            nullable=True,
            use_existing_column=True,
        )
    )

    __mapper_args__ = {
        "polymorphic_identity": "OriginalSimulatedObjectDAO",
        "inherit_condition": database_id == SymbolDAO.database_id,
    }


class ParentDAO(SymbolDAO, DataAccessObject[test.dataset.example_classes.Parent]):

    __tablename__ = "ParentDAO"

    database_id: Mapped[builtins.int] = mapped_column(
        ForeignKey(SymbolDAO.database_id), primary_key=True, use_existing_column=True
    )

    name: Mapped[builtins.str] = mapped_column(use_existing_column=True)

    __mapper_args__ = {
        "polymorphic_identity": "ParentDAO",
        "inherit_condition": database_id == SymbolDAO.database_id,
    }


class ChildMappedDAO(
    ParentDAO, DataAccessObject[test.dataset.example_classes.ChildMapped]
):

    __tablename__ = "ChildMappedDAO"

    database_id: Mapped[builtins.int] = mapped_column(
        ForeignKey(ParentDAO.database_id), primary_key=True, use_existing_column=True
    )

    attribute1: Mapped[builtins.int] = mapped_column(use_existing_column=True)

    __mapper_args__ = {
        "polymorphic_identity": "ChildMappedDAO",
        "inherit_condition": database_id == ParentDAO.database_id,
    }


class ParentBaseMappingDAO(
    Base, DataAccessObject[test.dataset.example_classes.ParentBaseMapping]
):

    __tablename__ = "ParentBaseMappingDAO"

    database_id: Mapped[builtins.int] = mapped_column(
        Integer, primary_key=True, use_existing_column=True
    )

    name: Mapped[builtins.str] = mapped_column(use_existing_column=True)


class ChildBaseMappingDAO(
    Base, DataAccessObject[test.dataset.example_classes.ChildBaseMapping]
):

    __tablename__ = "ChildBaseMappingDAO"

    database_id: Mapped[builtins.int] = mapped_column(
        Integer, primary_key=True, use_existing_column=True
    )

    name: Mapped[builtins.str] = mapped_column(use_existing_column=True)


class PoseDAO(SymbolDAO, DataAccessObject[test.dataset.example_classes.Pose]):

    __tablename__ = "PoseDAO"

    database_id: Mapped[builtins.int] = mapped_column(
        ForeignKey(SymbolDAO.database_id), primary_key=True, use_existing_column=True
    )

    position_id: Mapped[int] = mapped_column(
        ForeignKey("PositionDAO.database_id", use_alter=True),
        nullable=True,
        use_existing_column=True,
    )
    orientation_id: Mapped[int] = mapped_column(
        ForeignKey("OrientationDAO.database_id", use_alter=True),
        nullable=True,
        use_existing_column=True,
    )

    position: Mapped[PositionDAO] = relationship(
        "PositionDAO", uselist=False, foreign_keys=[position_id], post_update=True
    )
    orientation: Mapped[OrientationDAO] = relationship(
        "OrientationDAO", uselist=False, foreign_keys=[orientation_id], post_update=True
    )

    __mapper_args__ = {
        "polymorphic_identity": "PoseDAO",
        "inherit_condition": database_id == SymbolDAO.database_id,
    }


class PositionDAO(SymbolDAO, DataAccessObject[test.dataset.example_classes.Position]):

    __tablename__ = "PositionDAO"

    database_id: Mapped[builtins.int] = mapped_column(
        ForeignKey(SymbolDAO.database_id), primary_key=True, use_existing_column=True
    )

    x: Mapped[builtins.float] = mapped_column(use_existing_column=True)
    y: Mapped[builtins.float] = mapped_column(use_existing_column=True)
    z: Mapped[builtins.float] = mapped_column(use_existing_column=True)

    doublepositionaggregatordao_positions1_id: Mapped[typing.Optional[builtins.int]] = (
        mapped_column(
            ForeignKey("DoublePositionAggregatorDAO.database_id", use_alter=True),
            nullable=True,
            use_existing_column=True,
        )
    )
    doublepositionaggregatordao_positions2_id: Mapped[typing.Optional[builtins.int]] = (
        mapped_column(
            ForeignKey("DoublePositionAggregatorDAO.database_id", use_alter=True),
            nullable=True,
            use_existing_column=True,
        )
    )
    positionsdao_positions_id: Mapped[typing.Optional[builtins.int]] = mapped_column(
        ForeignKey("PositionsDAO.database_id", use_alter=True),
        nullable=True,
        use_existing_column=True,
    )

    __mapper_args__ = {
        "polymorphic_identity": "PositionDAO",
        "inherit_condition": database_id == SymbolDAO.database_id,
    }


class Position4DDAO(
    PositionDAO, DataAccessObject[test.dataset.example_classes.Position4D]
):

    __tablename__ = "Position4DDAO"

    database_id: Mapped[builtins.int] = mapped_column(
        ForeignKey(PositionDAO.database_id), primary_key=True, use_existing_column=True
    )

    w: Mapped[builtins.float] = mapped_column(use_existing_column=True)

    __mapper_args__ = {
        "polymorphic_identity": "Position4DDAO",
        "inherit_condition": database_id == PositionDAO.database_id,
    }


class Position5DDAO(
    Position4DDAO, DataAccessObject[test.dataset.example_classes.Position5D]
):

    __tablename__ = "Position5DDAO"

    database_id: Mapped[builtins.int] = mapped_column(
        ForeignKey(Position4DDAO.database_id),
        primary_key=True,
        use_existing_column=True,
    )

    v: Mapped[builtins.float] = mapped_column(use_existing_column=True)

    __mapper_args__ = {
        "polymorphic_identity": "Position5DDAO",
        "inherit_condition": database_id == Position4DDAO.database_id,
    }


class PositionTypeWrapperDAO(
    SymbolDAO, DataAccessObject[test.dataset.example_classes.PositionTypeWrapper]
):

    __tablename__ = "PositionTypeWrapperDAO"

    database_id: Mapped[builtins.int] = mapped_column(
        ForeignKey(SymbolDAO.database_id), primary_key=True, use_existing_column=True
    )

    position_type: Mapped[TypeType] = mapped_column(
        TypeType, nullable=False, use_existing_column=True
    )

    __mapper_args__ = {
        "polymorphic_identity": "PositionTypeWrapperDAO",
        "inherit_condition": database_id == SymbolDAO.database_id,
    }


class PositionsDAO(SymbolDAO, DataAccessObject[test.dataset.example_classes.Positions]):

    __tablename__ = "PositionsDAO"

    database_id: Mapped[builtins.int] = mapped_column(
        ForeignKey(SymbolDAO.database_id), primary_key=True, use_existing_column=True
    )

    some_strings: Mapped[typing.List[builtins.str]] = mapped_column(
        JSON, nullable=False, use_existing_column=True
    )

    positions: Mapped[typing.List[PositionDAO]] = relationship(
        "PositionDAO",
        foreign_keys="[PositionDAO.positionsdao_positions_id]",
        post_update=True,
    )

    __mapper_args__ = {
        "polymorphic_identity": "PositionsDAO",
        "inherit_condition": database_id == SymbolDAO.database_id,
    }


class PositionsSubclassWithAnotherPositionDAO(
    PositionsDAO,
    DataAccessObject[test.dataset.example_classes.PositionsSubclassWithAnotherPosition],
):

    __tablename__ = "PositionsSubclassWithAnotherPositionDAO"

    database_id: Mapped[builtins.int] = mapped_column(
        ForeignKey(PositionsDAO.database_id), primary_key=True, use_existing_column=True
    )

    positions2_id: Mapped[int] = mapped_column(
        ForeignKey("PositionDAO.database_id", use_alter=True),
        nullable=True,
        use_existing_column=True,
    )

    positions2: Mapped[PositionDAO] = relationship(
        "PositionDAO", uselist=False, foreign_keys=[positions2_id], post_update=True
    )

    __mapper_args__ = {
        "polymorphic_identity": "PositionsSubclassWithAnotherPositionDAO",
        "inherit_condition": database_id == PositionsDAO.database_id,
    }


class PredicateDAO(
    SymbolDAO, DataAccessObject[krrood.entity_query_language.predicate.Predicate]
):

    __tablename__ = "PredicateDAO"

    database_id: Mapped[builtins.int] = mapped_column(
        ForeignKey(SymbolDAO.database_id), primary_key=True, use_existing_column=True
    )

    __mapper_args__ = {
        "polymorphic_identity": "PredicateDAO",
        "inherit_condition": database_id == SymbolDAO.database_id,
    }


class PropertyDescriptorDAO(
    PredicateDAO,
    DataAccessObject[
        krrood.entity_query_language.property_descriptor.PropertyDescriptor
    ],
):

    __tablename__ = "PropertyDescriptorDAO"

    database_id: Mapped[builtins.int] = mapped_column(
        ForeignKey(PredicateDAO.database_id), primary_key=True, use_existing_column=True
    )

    __mapper_args__ = {
        "polymorphic_identity": "PropertyDescriptorDAO",
        "inherit_condition": database_id == PredicateDAO.database_id,
    }


class PrivateDefaultFactoryDAO(
    SymbolDAO, DataAccessObject[test.dataset.example_classes.PrivateDefaultFactory]
):

    __tablename__ = "PrivateDefaultFactoryDAO"

    database_id: Mapped[builtins.int] = mapped_column(
        ForeignKey(SymbolDAO.database_id), primary_key=True, use_existing_column=True
    )

    public_value: Mapped[builtins.int] = mapped_column(use_existing_column=True)

    __mapper_args__ = {
        "polymorphic_identity": "PrivateDefaultFactoryDAO",
        "inherit_condition": database_id == SymbolDAO.database_id,
    }


class ReferenceDAO(SymbolDAO, DataAccessObject[test.dataset.example_classes.Reference]):

    __tablename__ = "ReferenceDAO"

    database_id: Mapped[builtins.int] = mapped_column(
        ForeignKey(SymbolDAO.database_id), primary_key=True, use_existing_column=True
    )

    value: Mapped[builtins.int] = mapped_column(use_existing_column=True)

    backreference_id: Mapped[typing.Optional[builtins.int]] = mapped_column(
        ForeignKey("BackreferenceMappingDAO.database_id", use_alter=True),
        nullable=True,
        use_existing_column=True,
    )

    backreference: Mapped[BackreferenceMappingDAO] = relationship(
        "BackreferenceMappingDAO",
        uselist=False,
        foreign_keys=[backreference_id],
        post_update=True,
    )

    __mapper_args__ = {
        "polymorphic_identity": "ReferenceDAO",
        "inherit_condition": database_id == SymbolDAO.database_id,
    }


class RelationshipParentDAO(
    SymbolDAO, DataAccessObject[test.dataset.example_classes.RelationshipParent]
):

    __tablename__ = "RelationshipParentDAO"

    database_id: Mapped[builtins.int] = mapped_column(
        ForeignKey(SymbolDAO.database_id), primary_key=True, use_existing_column=True
    )

    positions_id: Mapped[int] = mapped_column(
        ForeignKey("PositionDAO.database_id", use_alter=True),
        nullable=True,
        use_existing_column=True,
    )

    positions: Mapped[PositionDAO] = relationship(
        "PositionDAO", uselist=False, foreign_keys=[positions_id], post_update=True
    )

    __mapper_args__ = {
        "polymorphic_identity": "RelationshipParentDAO",
        "inherit_condition": database_id == SymbolDAO.database_id,
    }


class RelationshipChildDAO(
    RelationshipParentDAO,
    DataAccessObject[test.dataset.example_classes.RelationshipChild],
):

    __tablename__ = "RelationshipChildDAO"

    database_id: Mapped[builtins.int] = mapped_column(
        ForeignKey(RelationshipParentDAO.database_id),
        primary_key=True,
        use_existing_column=True,
    )

    __mapper_args__ = {
        "polymorphic_identity": "RelationshipChildDAO",
        "inherit_condition": database_id == RelationshipParentDAO.database_id,
    }


class RotationMappedDAO(
    Base, DataAccessObject[test.dataset.example_classes.RotationMapped]
):

    __tablename__ = "RotationMappedDAO"

    database_id: Mapped[builtins.int] = mapped_column(
        Integer, primary_key=True, use_existing_column=True
    )

    angle: Mapped[builtins.float] = mapped_column(use_existing_column=True)


class ShapeDAO(SymbolDAO, DataAccessObject[test.dataset.example_classes.Shape]):

    __tablename__ = "ShapeDAO"

    database_id: Mapped[builtins.int] = mapped_column(
        ForeignKey(SymbolDAO.database_id), primary_key=True, use_existing_column=True
    )

    name: Mapped[builtins.str] = mapped_column(use_existing_column=True)

    origin_id: Mapped[int] = mapped_column(
        ForeignKey("TransformationMappedDAO.database_id", use_alter=True),
        nullable=True,
        use_existing_column=True,
    )
    shapesdao_shapes_id: Mapped[typing.Optional[builtins.int]] = mapped_column(
        ForeignKey("ShapesDAO.database_id", use_alter=True),
        nullable=True,
        use_existing_column=True,
    )

    origin: Mapped[TransformationMappedDAO] = relationship(
        "TransformationMappedDAO",
        uselist=False,
        foreign_keys=[origin_id],
        post_update=True,
    )

    __mapper_args__ = {
        "polymorphic_identity": "ShapeDAO",
        "inherit_condition": database_id == SymbolDAO.database_id,
    }


class ShapesDAO(SymbolDAO, DataAccessObject[test.dataset.example_classes.Shapes]):

    __tablename__ = "ShapesDAO"

    database_id: Mapped[builtins.int] = mapped_column(
        ForeignKey(SymbolDAO.database_id), primary_key=True, use_existing_column=True
    )

    moreshapesdao_shapes_id: Mapped[typing.Optional[builtins.int]] = mapped_column(
        ForeignKey("MoreShapesDAO.database_id", use_alter=True),
        nullable=True,
        use_existing_column=True,
    )

    shapes: Mapped[typing.List[ShapeDAO]] = relationship(
        "ShapeDAO", foreign_keys="[ShapeDAO.shapesdao_shapes_id]", post_update=True
    )

    __mapper_args__ = {
        "polymorphic_identity": "ShapesDAO",
        "inherit_condition": database_id == SymbolDAO.database_id,
    }


class SymbolGraphMappingDAO(
    Base, DataAccessObject[krrood.entity_query_language.orm.model.SymbolGraphMapping]
):

    __tablename__ = "SymbolGraphMappingDAO"

    database_id: Mapped[builtins.int] = mapped_column(
        Integer, primary_key=True, use_existing_column=True
    )

    instances: Mapped[typing.List[WrappedInstanceDAO]] = relationship(
        "WrappedInstanceDAO",
        foreign_keys="[WrappedInstanceDAO.symbolgraphmappingdao_instances_id]",
        post_update=True,
    )
    predicate_relations: Mapped[typing.List[PredicateRelationDAO]] = relationship(
        "PredicateRelationDAO",
        foreign_keys="[PredicateRelationDAO.symbolgraphmappingdao_predicate_relations_id]",
        post_update=True,
    )


class ThingDAO(
    SymbolDAO, DataAccessObject[krrood.entity_query_language.property_descriptor.Thing]
):

    __tablename__ = "ThingDAO"

    database_id: Mapped[builtins.int] = mapped_column(
        ForeignKey(SymbolDAO.database_id), primary_key=True, use_existing_column=True
    )

    __mapper_args__ = {
        "polymorphic_identity": "ThingDAO",
        "inherit_condition": database_id == SymbolDAO.database_id,
    }


class TorsoDAO(KinematicChainDAO, DataAccessObject[test.dataset.example_classes.Torso]):

    __tablename__ = "TorsoDAO"

    database_id: Mapped[builtins.int] = mapped_column(
        ForeignKey(KinematicChainDAO.database_id),
        primary_key=True,
        use_existing_column=True,
    )

    kinematic_chains: Mapped[typing.List[KinematicChainDAO]] = relationship(
        "KinematicChainDAO",
        foreign_keys="[KinematicChainDAO.torsodao_kinematic_chains_id]",
        post_update=True,
    )

    __mapper_args__ = {
        "polymorphic_identity": "TorsoDAO",
        "inherit_condition": database_id == KinematicChainDAO.database_id,
    }


class TransformationMappedDAO(
    Base, DataAccessObject[test.dataset.example_classes.TransformationMapped]
):

    __tablename__ = "TransformationMappedDAO"

    database_id: Mapped[builtins.int] = mapped_column(
        Integer, primary_key=True, use_existing_column=True
    )

    vector_id: Mapped[int] = mapped_column(
        ForeignKey("VectorMappedDAO.database_id", use_alter=True),
        nullable=True,
        use_existing_column=True,
    )
    rotation_id: Mapped[int] = mapped_column(
        ForeignKey("RotationMappedDAO.database_id", use_alter=True),
        nullable=True,
        use_existing_column=True,
    )

    vector: Mapped[VectorMappedDAO] = relationship(
        "VectorMappedDAO", uselist=False, foreign_keys=[vector_id], post_update=True
    )
    rotation: Mapped[RotationMappedDAO] = relationship(
        "RotationMappedDAO", uselist=False, foreign_keys=[rotation_id], post_update=True
    )


class VectorMappedDAO(
    Base, DataAccessObject[test.dataset.example_classes.VectorMapped]
):

    __tablename__ = "VectorMappedDAO"

    database_id: Mapped[builtins.int] = mapped_column(
        Integer, primary_key=True, use_existing_column=True
    )

    x: Mapped[builtins.float] = mapped_column(use_existing_column=True)

    vectorswithpropertymappeddao_vectors_id: Mapped[typing.Optional[builtins.int]] = (
        mapped_column(
            ForeignKey("VectorsWithPropertyMappedDAO.database_id", use_alter=True),
            nullable=True,
            use_existing_column=True,
        )
    )


class VectorsWithPropertyMappedDAO(
    Base, DataAccessObject[test.dataset.example_classes.VectorsWithPropertyMapped]
):

    __tablename__ = "VectorsWithPropertyMappedDAO"

    database_id: Mapped[builtins.int] = mapped_column(
        Integer, primary_key=True, use_existing_column=True
    )

    vectors: Mapped[typing.List[VectorMappedDAO]] = relationship(
        "VectorMappedDAO",
        foreign_keys="[VectorMappedDAO.vectorswithpropertymappeddao_vectors_id]",
        post_update=True,
    )


class WorldDAO(
    SymbolDAO, DataAccessObject[test.dataset.semantic_world_like_classes.World]
):

    __tablename__ = "WorldDAO"

    database_id: Mapped[builtins.int] = mapped_column(
        ForeignKey(SymbolDAO.database_id), primary_key=True, use_existing_column=True
    )

    id: Mapped[builtins.int] = mapped_column(use_existing_column=True)

    bodies: Mapped[typing.List[BodyDAO]] = relationship(
        "BodyDAO", foreign_keys="[BodyDAO.worlddao_bodies_id]", post_update=True
    )
    connections: Mapped[typing.List[ConnectionDAO]] = relationship(
        "ConnectionDAO",
        foreign_keys="[ConnectionDAO.worlddao_connections_id]",
        post_update=True,
    )
    views: Mapped[typing.List[ViewDAO]] = relationship(
        "ViewDAO", foreign_keys="[ViewDAO.worlddao_views_id]", post_update=True
    )

    __mapper_args__ = {
        "polymorphic_identity": "WorldDAO",
        "inherit_condition": database_id == SymbolDAO.database_id,
    }


class WorldEntityDAO(
    SymbolDAO, DataAccessObject[test.dataset.semantic_world_like_classes.WorldEntity]
):

    __tablename__ = "WorldEntityDAO"

    database_id: Mapped[builtins.int] = mapped_column(
        ForeignKey(SymbolDAO.database_id), primary_key=True, use_existing_column=True
    )

    world_id: Mapped[typing.Optional[builtins.int]] = mapped_column(
        ForeignKey("WorldDAO.database_id", use_alter=True),
        nullable=True,
        use_existing_column=True,
    )

    world: Mapped[WorldDAO] = relationship(
        "WorldDAO", uselist=False, foreign_keys=[world_id], post_update=True
    )

    __mapper_args__ = {
        "polymorphic_identity": "WorldEntityDAO",
        "inherit_condition": database_id == SymbolDAO.database_id,
    }


class BodyDAO(
    WorldEntityDAO, DataAccessObject[test.dataset.semantic_world_like_classes.Body]
):

    __tablename__ = "BodyDAO"

    database_id: Mapped[builtins.int] = mapped_column(
        ForeignKey(WorldEntityDAO.database_id),
        primary_key=True,
        use_existing_column=True,
    )

    name: Mapped[builtins.str] = mapped_column(use_existing_column=True)
    size: Mapped[builtins.int] = mapped_column(use_existing_column=True)

    worlddao_bodies_id: Mapped[typing.Optional[builtins.int]] = mapped_column(
        ForeignKey("WorldDAO.database_id", use_alter=True),
        nullable=True,
        use_existing_column=True,
    )

    __mapper_args__ = {
        "polymorphic_identity": "BodyDAO",
        "inherit_condition": database_id == WorldEntityDAO.database_id,
    }


class ContainerDAO(
    BodyDAO, DataAccessObject[test.dataset.semantic_world_like_classes.Container]
):

    __tablename__ = "ContainerDAO"

    database_id: Mapped[builtins.int] = mapped_column(
        ForeignKey(BodyDAO.database_id), primary_key=True, use_existing_column=True
    )

    __mapper_args__ = {
        "polymorphic_identity": "ContainerDAO",
        "inherit_condition": database_id == BodyDAO.database_id,
    }


class HandleDAO(
    BodyDAO, DataAccessObject[test.dataset.semantic_world_like_classes.Handle]
):

    __tablename__ = "HandleDAO"

    database_id: Mapped[builtins.int] = mapped_column(
        ForeignKey(BodyDAO.database_id), primary_key=True, use_existing_column=True
    )

    __mapper_args__ = {
        "polymorphic_identity": "HandleDAO",
        "inherit_condition": database_id == BodyDAO.database_id,
    }


class ConnectionDAO(
    WorldEntityDAO,
    DataAccessObject[test.dataset.semantic_world_like_classes.Connection],
):

    __tablename__ = "ConnectionDAO"

    database_id: Mapped[builtins.int] = mapped_column(
        ForeignKey(WorldEntityDAO.database_id),
        primary_key=True,
        use_existing_column=True,
    )

    worlddao_connections_id: Mapped[typing.Optional[builtins.int]] = mapped_column(
        ForeignKey("WorldDAO.database_id", use_alter=True),
        nullable=True,
        use_existing_column=True,
    )
    parent_id: Mapped[int] = mapped_column(
        ForeignKey("BodyDAO.database_id", use_alter=True),
        nullable=True,
        use_existing_column=True,
    )
    child_id: Mapped[int] = mapped_column(
        ForeignKey("BodyDAO.database_id", use_alter=True),
        nullable=True,
        use_existing_column=True,
    )

    parent: Mapped[BodyDAO] = relationship(
        "BodyDAO", uselist=False, foreign_keys=[parent_id], post_update=True
    )
    child: Mapped[BodyDAO] = relationship(
        "BodyDAO", uselist=False, foreign_keys=[child_id], post_update=True
    )

    __mapper_args__ = {
        "polymorphic_identity": "ConnectionDAO",
        "inherit_condition": database_id == WorldEntityDAO.database_id,
    }


class FixedConnectionDAO(
    ConnectionDAO,
    DataAccessObject[test.dataset.semantic_world_like_classes.FixedConnection],
):

    __tablename__ = "FixedConnectionDAO"

    database_id: Mapped[builtins.int] = mapped_column(
        ForeignKey(ConnectionDAO.database_id),
        primary_key=True,
        use_existing_column=True,
    )

    __mapper_args__ = {
        "polymorphic_identity": "FixedConnectionDAO",
        "inherit_condition": database_id == ConnectionDAO.database_id,
    }


class PrismaticConnectionDAO(
    ConnectionDAO,
    DataAccessObject[test.dataset.semantic_world_like_classes.PrismaticConnection],
):

    __tablename__ = "PrismaticConnectionDAO"

    database_id: Mapped[builtins.int] = mapped_column(
        ForeignKey(ConnectionDAO.database_id),
        primary_key=True,
        use_existing_column=True,
    )

    __mapper_args__ = {
        "polymorphic_identity": "PrismaticConnectionDAO",
        "inherit_condition": database_id == ConnectionDAO.database_id,
    }


class RevoluteConnectionDAO(
    ConnectionDAO,
    DataAccessObject[test.dataset.semantic_world_like_classes.RevoluteConnection],
):

    __tablename__ = "RevoluteConnectionDAO"

    database_id: Mapped[builtins.int] = mapped_column(
        ForeignKey(ConnectionDAO.database_id),
        primary_key=True,
        use_existing_column=True,
    )

    __mapper_args__ = {
        "polymorphic_identity": "RevoluteConnectionDAO",
        "inherit_condition": database_id == ConnectionDAO.database_id,
    }


class ViewDAO(
    WorldEntityDAO, DataAccessObject[test.dataset.semantic_world_like_classes.View]
):

    __tablename__ = "ViewDAO"

    database_id: Mapped[builtins.int] = mapped_column(
        ForeignKey(WorldEntityDAO.database_id),
        primary_key=True,
        use_existing_column=True,
    )

    worlddao_views_id: Mapped[typing.Optional[builtins.int]] = mapped_column(
        ForeignKey("WorldDAO.database_id", use_alter=True),
        nullable=True,
        use_existing_column=True,
    )

    __mapper_args__ = {
        "polymorphic_identity": "ViewDAO",
        "inherit_condition": database_id == WorldEntityDAO.database_id,
    }


class CabinetDAO(
    ViewDAO, DataAccessObject[test.dataset.semantic_world_like_classes.Cabinet]
):

    __tablename__ = "CabinetDAO"

    database_id: Mapped[builtins.int] = mapped_column(
        ForeignKey(ViewDAO.database_id), primary_key=True, use_existing_column=True
    )

    container_id: Mapped[int] = mapped_column(
        ForeignKey("ContainerDAO.database_id", use_alter=True),
        nullable=True,
        use_existing_column=True,
    )

    container: Mapped[ContainerDAO] = relationship(
        "ContainerDAO", uselist=False, foreign_keys=[container_id], post_update=True
    )
    drawers: Mapped[typing.List[DrawerDAO]] = relationship(
        "DrawerDAO", foreign_keys="[DrawerDAO.cabinetdao_drawers_id]", post_update=True
    )

    __mapper_args__ = {
        "polymorphic_identity": "CabinetDAO",
        "inherit_condition": database_id == ViewDAO.database_id,
    }


class DoorDAO(ViewDAO, DataAccessObject[test.dataset.semantic_world_like_classes.Door]):

    __tablename__ = "DoorDAO"

    database_id: Mapped[builtins.int] = mapped_column(
        ForeignKey(ViewDAO.database_id), primary_key=True, use_existing_column=True
    )

    handle_id: Mapped[int] = mapped_column(
        ForeignKey("HandleDAO.database_id", use_alter=True),
        nullable=True,
        use_existing_column=True,
    )
    body_id: Mapped[int] = mapped_column(
        ForeignKey("BodyDAO.database_id", use_alter=True),
        nullable=True,
        use_existing_column=True,
    )

    handle: Mapped[HandleDAO] = relationship(
        "HandleDAO", uselist=False, foreign_keys=[handle_id], post_update=True
    )
    body: Mapped[BodyDAO] = relationship(
        "BodyDAO", uselist=False, foreign_keys=[body_id], post_update=True
    )

    __mapper_args__ = {
        "polymorphic_identity": "DoorDAO",
        "inherit_condition": database_id == ViewDAO.database_id,
    }


class DrawerDAO(
    ViewDAO, DataAccessObject[test.dataset.semantic_world_like_classes.Drawer]
):

    __tablename__ = "DrawerDAO"

    database_id: Mapped[builtins.int] = mapped_column(
        ForeignKey(ViewDAO.database_id), primary_key=True, use_existing_column=True
    )

    correct: Mapped[typing.Optional[builtins.bool]] = mapped_column(
        use_existing_column=True
    )

    cabinetdao_drawers_id: Mapped[typing.Optional[builtins.int]] = mapped_column(
        ForeignKey("CabinetDAO.database_id", use_alter=True),
        nullable=True,
        use_existing_column=True,
    )
    handle_id: Mapped[int] = mapped_column(
        ForeignKey("HandleDAO.database_id", use_alter=True),
        nullable=True,
        use_existing_column=True,
    )
    container_id: Mapped[int] = mapped_column(
        ForeignKey("ContainerDAO.database_id", use_alter=True),
        nullable=True,
        use_existing_column=True,
    )

    handle: Mapped[HandleDAO] = relationship(
        "HandleDAO", uselist=False, foreign_keys=[handle_id], post_update=True
    )
    container: Mapped[ContainerDAO] = relationship(
        "ContainerDAO", uselist=False, foreign_keys=[container_id], post_update=True
    )

    __mapper_args__ = {
        "polymorphic_identity": "DrawerDAO",
        "inherit_condition": database_id == ViewDAO.database_id,
    }


class WardrobeDAO(
    ViewDAO, DataAccessObject[test.dataset.semantic_world_like_classes.Wardrobe]
):

    __tablename__ = "WardrobeDAO"

    database_id: Mapped[builtins.int] = mapped_column(
        ForeignKey(ViewDAO.database_id), primary_key=True, use_existing_column=True
    )

    handle_id: Mapped[int] = mapped_column(
        ForeignKey("HandleDAO.database_id", use_alter=True),
        nullable=True,
        use_existing_column=True,
    )
    body_id: Mapped[int] = mapped_column(
        ForeignKey("BodyDAO.database_id", use_alter=True),
        nullable=True,
        use_existing_column=True,
    )
    container_id: Mapped[int] = mapped_column(
        ForeignKey("ContainerDAO.database_id", use_alter=True),
        nullable=True,
        use_existing_column=True,
    )

    handle: Mapped[HandleDAO] = relationship(
        "HandleDAO", uselist=False, foreign_keys=[handle_id], post_update=True
    )
    body: Mapped[BodyDAO] = relationship(
        "BodyDAO", uselist=False, foreign_keys=[body_id], post_update=True
    )
    container: Mapped[ContainerDAO] = relationship(
        "ContainerDAO", uselist=False, foreign_keys=[container_id], post_update=True
    )

    __mapper_args__ = {
        "polymorphic_identity": "WardrobeDAO",
        "inherit_condition": database_id == ViewDAO.database_id,
    }


class WrappedInstanceDAO(
    Base, DataAccessObject[krrood.entity_query_language.symbol_graph.WrappedInstance]
):

    __tablename__ = "WrappedInstanceDAO"

    database_id: Mapped[builtins.int] = mapped_column(
        Integer, primary_key=True, use_existing_column=True
    )

    index: Mapped[typing.Optional[builtins.int]] = mapped_column(
        use_existing_column=True
    )
    inferred: Mapped[builtins.bool] = mapped_column(use_existing_column=True)

    symbolgraphmappingdao_instances_id: Mapped[typing.Optional[builtins.int]] = (
        mapped_column(
            ForeignKey("SymbolGraphMappingDAO.database_id", use_alter=True),
            nullable=True,
            use_existing_column=True,
        )
    )
    instance_id: Mapped[int] = mapped_column(
        ForeignKey("SymbolDAO.database_id", use_alter=True),
        nullable=True,
        use_existing_column=True,
    )

    instance: Mapped[SymbolDAO] = relationship(
        "SymbolDAO", uselist=False, foreign_keys=[instance_id], post_update=True
    )
