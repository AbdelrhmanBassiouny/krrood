# Generated by ORMatic

from __future__ import annotations
from sqlalchemy import (
    Column,
    ForeignKey,
    Integer,
    String,
    Float,
    Boolean,
    DateTime,
    Enum,
    JSON,
)
from sqlalchemy.orm import relationship, Mapped, mapped_column, DeclarativeBase

import builtins
import typing

import krrood
from krrood.entity_query_language.predicate import Predicate, PropertyDescriptor, Thing
from krrood.entity_query_language.symbol_graph import PredicateRelation, WrappedInstance
from krrood.entity_query_language.orm.model import SymbolGraphMapping

from krrood.ormatic.dao import DataAccessObject
from krrood.ormatic.custom_types import TypeType


class Base(DeclarativeBase):
    type_mappings = {}


class PredicateDAO(Base, DataAccessObject[Predicate]):

    __tablename__ = "PredicateDAO"

    database_id: Mapped[builtins.int] = mapped_column(
        Integer, primary_key=True, use_existing_column=True
    )

    polymorphic_type: Mapped[str] = mapped_column(
        String(255), nullable=False, use_existing_column=True
    )

    __mapper_args__ = {
        "polymorphic_on": "polymorphic_type",
        "polymorphic_identity": "PredicateDAO",
    }


class PredicateRelationDAO(
    Base, DataAccessObject[krrood.entity_query_language.symbol_graph.PredicateRelation]
):

    __tablename__ = "PredicateRelationDAO"

    database_id: Mapped[builtins.int] = mapped_column(
        Integer, primary_key=True, use_existing_column=True
    )

    inferred: Mapped[builtins.bool] = mapped_column(use_existing_column=True)

    source_id: Mapped[int] = mapped_column(
        ForeignKey("WrappedInstanceDAO.database_id", use_alter=True),
        nullable=True,
        use_existing_column=True,
    )
    target_id: Mapped[int] = mapped_column(
        ForeignKey("WrappedInstanceDAO.database_id", use_alter=True),
        nullable=True,
        use_existing_column=True,
    )
    predicate_id: Mapped[int] = mapped_column(
        ForeignKey("PredicateDAO.database_id", use_alter=True),
        nullable=True,
        use_existing_column=True,
    )
    symbolgraphmappingdao_predicate_relations_id: Mapped[
        typing.Optional[builtins.int]
    ] = mapped_column(
        ForeignKey("SymbolGraphMappingDAO.database_id", use_alter=True),
        nullable=True,
        use_existing_column=True,
    )

    source: Mapped[WrappedInstanceDAO] = relationship(
        "WrappedInstanceDAO", uselist=False, foreign_keys=[source_id], post_update=True
    )
    target: Mapped[WrappedInstanceDAO] = relationship(
        "WrappedInstanceDAO", uselist=False, foreign_keys=[target_id], post_update=True
    )
    predicate: Mapped[PredicateDAO] = relationship(
        "PredicateDAO", uselist=False, foreign_keys=[predicate_id], post_update=True
    )


class PropertyDescriptorDAO(
    PredicateDAO,
    DataAccessObject[krrood.entity_query_language.predicate.PropertyDescriptor],
):

    __tablename__ = "PropertyDescriptorDAO"

    database_id: Mapped[builtins.int] = mapped_column(
        ForeignKey(PredicateDAO.database_id), primary_key=True, use_existing_column=True
    )

    __mapper_args__ = {
        "polymorphic_identity": "PropertyDescriptorDAO",
        "inherit_condition": database_id == PredicateDAO.database_id,
    }


class SymbolGraphMappingDAO(
    Base, DataAccessObject[krrood.entity_query_language.orm.model.SymbolGraphMapping]
):

    __tablename__ = "SymbolGraphMappingDAO"

    database_id: Mapped[builtins.int] = mapped_column(
        Integer, primary_key=True, use_existing_column=True
    )

    instances: Mapped[typing.List[WrappedInstanceDAO]] = relationship(
        "WrappedInstanceDAO",
        foreign_keys="[WrappedInstanceDAO.symbolgraphmappingdao_instances_id]",
        post_update=True,
    )
    predicate_relations: Mapped[typing.List[PredicateRelationDAO]] = relationship(
        "PredicateRelationDAO",
        foreign_keys="[PredicateRelationDAO.symbolgraphmappingdao_predicate_relations_id]",
        post_update=True,
    )


class ThingDAO(Base, DataAccessObject[krrood.entity_query_language.predicate.Thing]):

    __tablename__ = "ThingDAO"

    database_id: Mapped[builtins.int] = mapped_column(
        Integer, primary_key=True, use_existing_column=True
    )


class WrappedInstanceDAO(
    Base, DataAccessObject[krrood.entity_query_language.symbol_graph.WrappedInstance]
):

    __tablename__ = "WrappedInstanceDAO"

    database_id: Mapped[builtins.int] = mapped_column(
        Integer, primary_key=True, use_existing_column=True
    )

    index: Mapped[typing.Optional[builtins.int]] = mapped_column(
        use_existing_column=True
    )
    inferred: Mapped[builtins.bool] = mapped_column(use_existing_column=True)

    symbolgraphmappingdao_instances_id: Mapped[typing.Optional[builtins.int]] = (
        mapped_column(
            ForeignKey("SymbolGraphMappingDAO.database_id", use_alter=True),
            nullable=True,
            use_existing_column=True,
        )
    )
